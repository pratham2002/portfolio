{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/projects.js","components/resume.js","route.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","react_default","a","createElement","style","width","margin","lib","className","col","src","alt","href","target","rel","aria-hidden","Component","AboutMe","Contact","Projects","Resume","Main","Switch","Route","exact","path","component","AboutMePage","ContactPage","ProjectsPage","ResumePage","App","title","scroll","Link","to","route","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a57802bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Cell } from 'react-mdl';\r\n\r\nclass LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{ width: '100%', margin: 'auto' }}>\r\n                <Grid className=\"landing-grid\">\r\n                    <Cell col={12}>\r\n                        <img\r\n                            src=\"https://cdn0.iconfinder.com/data/icons/avatar-2/500/man-2-512.png\"\r\n                            alt=\"img-avatar\"\r\n                            className=\"img-avatar\"\r\n                        />\r\n                        <div className=\"banner-text\">\r\n                            <h1>Full Stack Web Developer</h1>\r\n                            <hr />\r\n                            <p>JavaScript | HTML/CSS | React | NodeJS | Express</p>\r\n                            <div className=\"social-links\">\r\n                                {/* Github  */}\r\n                                <a href=\"http://google.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    <i className=\"fa fa-github-square\" aria-hidden=\"true\" />\r\n                                </a>\r\n                                {/* LinkedIn */}\r\n                                <a href=\"http://google.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    <i className=\"fa fa-linkedin-square\" aria-hidden=\"true\" />\r\n                                </a>\r\n                                {/* Facebook */}\r\n                                <a href=\"http://google.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    <i className=\"fa fa-facebook-square\" aria-hidden=\"true\" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </Cell>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LandingPage;","import React, { Component} from 'react';\r\n\r\nclass AboutMe extends Component{\r\n    render(){\r\n        return(\r\n            <div><h1>AboutMe</h1></div>\r\n        )\r\n    }\r\n}\r\n    \r\nexport default AboutMe;","import React, { Component} from 'react';\r\n\r\nclass Contact extends Component{\r\n    render(){\r\n        return(\r\n            <div><h1>Contact</h1></div>\r\n        )\r\n    }\r\n}\r\n    \r\nexport default Contact;","import React, { Component} from 'react';\r\n\r\nclass Projects extends Component{\r\n    render(){\r\n        return(\r\n            <div><h1>Projects</h1></div>\r\n        )\r\n    }\r\n}\r\n    \r\nexport default Projects;","import React, { Component} from 'react';\r\n\r\nclass Resume extends Component{\r\n    render(){\r\n        return(\r\n            <div><h1>Resume</h1></div>\r\n        )\r\n    }\r\n}\r\n    \r\nexport default Resume;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from './components/landingpage';\r\nimport AboutMePage from './components/aboutme';\r\nimport ContactPage from './components/contact';\r\nimport ProjectsPage from './components/projects';\r\nimport ResumePage from './components/resume';\r\n\r\nconst Main = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={LandingPage}> </Route>\r\n        <Route path=\"/aboutme\" component={AboutMePage}> </Route>\r\n        <Route path=\"/contact\" component={ContactPage}> </Route>\r\n        <Route path=\"/projects\" component={ProjectsPage}> </Route>\r\n        <Route path=\"/resume\" component={ResumePage}> </Route>\r\n    </Switch>\r\n)\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './route';\nimport { Link } from 'react-router-dom'\n\nimport { Layout, Header, Navigation, Content } from 'react-mdl';\n\nclass App extends Component {\n  render() {\n    return (\n      < div className=\"demo-big-content\" >\n        <Layout>\n          <Header title=\"Ritesh Firodiya\" scroll className=\"header-color\">\n            <Navigation>\n              <Link to=\"/resume\">Resume</Link>\n              <Link to=\"/aboutme\">About Me</Link>\n              <Link to=\"/projects\">Projects</Link>\n              <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n          </Header>\n          <Content>\n            <div className=\"page-content\" />\n            <Main />\n          </Content>\n        </Layout>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}